(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> Error in URI 'string1' or database not supported"
p3
sS'layer'
p4
S'/home/roshan/web2py/applications/comparedb/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    #response.flash = T("Hello World")\n    return dict(message=T(\'A simple app to compare two databases\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef enter():\n    form = SQLFORM.factory(Field(\'db1\',\n                                 label=\'Enter name of First DB?\',\n                                 requires=IS_NOT_EMPTY()),\n                          Field(\'user1\',\n                                 label=\'Enter Username for First DB?\',\n                                 requires=IS_NOT_EMPTY()),\n                           Field(\'password1\',\n                                 label=\'Enter Password for First DB?\',type = "password",\n                                 requires=IS_NOT_EMPTY()),\n                           Field(\'db2\',\n                                 label=\'Enter name of Second DB?\',\n                                 requires=IS_NOT_EMPTY()),\n                           Field(\'user2\',\n                                 label=\'Enter Username for Second DB?\',\n                                 requires=IS_NOT_EMPTY()),\n                           Field(\'password2\',\n                                 label=\'Enter Password for Second DB?\',type = "password",\n                                 requires=IS_NOT_EMPTY()),\n                          )\n    form.element(\'input[name=(user1)\')[\'_style\']=\'width:150px\'\n    form.element(\'input[name=(db1)\')[\'_style\']=\'width:150px\'\n    form.element(\'input[name=(password1)\')[\'_style\']=\'width:150px\'\n    form.element(\'input[name=(user2)\')[\'_style\']=\'width:150px\'\n    form.element(\'input[name=(db2)\')[\'_style\']=\'width:150px\'\n    form.element(\'input[name=(password2)\')[\'_style\']=\'width:150px\'\n    \n    string1 = \'\'\n    string2 = \'\'\n    if form.process().accepted:\n        string1= \'mysql://\'+ form.vars.user1 + \':\' +form.vars.password1 + \'@localhost/\' + form.vars.db1\n        string2= \'mysql://\'+ form.vars.user2 + \':\' +form.vars.password2 + \'@localhost/\' + form.vars.db2\n    db1 = DAL(\'string1\',\n         pool_size=20,\n         migrate_enabled=False,\n         check_reserved=[\'all\'])\n    db2 = DAL(string2,\n          pool_size=20,\n          migrate_enabled=False,\n          check_reserved=[\'all\'])\n        #redirect(URL(\'second\'))\n    return dict(form=form)\n\nresponse._vars=response._caller(enter)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/roshan/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/roshan/web2py/applications/comparedb/controllers/default.py", line 104, in <module>\n  File "/home/roshan/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/roshan/web2py/applications/comparedb/controllers/default.py", line 96, in enter\n    check_reserved=[\'all\'])\n  File "/home/roshan/web2py/gluon/packages/dal/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/home/roshan/web2py/gluon/packages/dal/pydal/base.py", line 431, in __init__\n    % self._dbname\nSyntaxError: Error in URI \'string1\' or database not supported\n'
p11
s.